version: '3.7'

services:
  delivery-database:
    image: postgres:latest
    container_name: delivery-database
    env_file:
      - ./config/delivery_db.env
    ports:
      - "15432:5432"
    networks:
      backend:
        aliases:
          - "delivery-database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  order-database:
    image: postgres:latest
    container_name: order-database
    env_file:
      - ./config/order_db.env
    ports:
      - "25432:5432"
    networks:
      backend:
        aliases:
          - "order-database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  auth-database:
    image: postgres:latest
    container_name: auth-database
    env_file:
      - ./config/auth_db.env
    ports:
      - "35432:5432"
    networks:
      backend:
        aliases:
          - "auth-database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      backend:
        aliases:
          - "kafka"
  config-server:
    container_name: config-server
    build:
      context: ../config-server
      dockerfile: Dockerfile
    image: parcel-delivery/config-server:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    ports:
      - "8071:8071"
    networks:
      backend:
        aliases:
          - "config-server"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  eureka-server:
    container_name: eureka-server
    build:
      context: ../eureka-server
      dockerfile: Dockerfile
    image: parcel-delivery/eureka-server:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: unless-stopped
    ports:
      - "8070:8070"
    environment:
      profile: "default"
    depends_on:
    - config-server
    healthcheck:
      test: [ "CMD-SHELL", "ping -c 10 localhost" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      backend:
        aliases:
          - "eureka-server"
  gateway-server:
    container_name: gateway-server
    build:
      context: ../gateway-server
      dockerfile: Dockerfile
    image: parcel-delivery/gateway-server:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: on-failure
    ports:
      - "8080:8080"
    environment:
      profile: "default"
    depends_on:
      - eureka-server
      - config-server
    healthcheck:
      test: [ "CMD-SHELL", "ping -c 10 localhost" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      backend:
        aliases:
          - "gateway-server"
  auth-server:
    container_name: auth-server
    build:
      context: ../auth-server
      dockerfile: Dockerfile
    image: parcel-delivery/auth-server:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: on-failure
    ports:
      - "8097:8097"
    environment:
      profile: "dev"
    depends_on:
      - eureka-server
      - config-server
      - auth-database
    networks:
      - backend
  order-service:
    container_name: order-service
    build:
      context: ../order-service
      dockerfile: Dockerfile
    image: parcel-delivery/order-service:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: on-failure
    ports:
      - "8096:8096"
    environment:
      profile: "dev"
    depends_on:
      - eureka-server
      - config-server
      - order-database
      - kafka
    networks:
      - backend
  delivery-service:
    container_name: delivery-service
    build:
      context: ../delivery-service
      dockerfile: Dockerfile
    image: parcel-delivery/delivery-service:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: on-failure
    ports:
      - "8095:8095"
    environment:
      profile: "dev"
    depends_on:
      - eureka-server
      - config-server
      - delivery-database
      - kafka
    networks:
      - backend
  notification-service:
    container_name: notification-service
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    image: parcel-delivery/notification-service:0.0.1-SNAPSHOT
    env_file:
      - ./config/cloud_config.env
    restart: on-failure
    ports:
      - "8094:8094"
    environment:
      profile: "dev"
    depends_on:
      - eureka-server
      - config-server
      - kafka
    networks:
      - backend
  prometheus:
    image: prom/prometheus:latest
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    container_name: prometheus
    networks:
      backend:
        aliases:
        - "prometheus"
  grafana:
    image: "grafana/grafana:latest"
    restart: on-failure
    env_file:
      - config/grafana.env
    ports:
      - "3000:3000"
    container_name: grafana
    networks:
      backend:
        aliases:
         - "grafana"

#
#  vault:
#    image: vault:latest
#    volumes:
#      - ./vault/config:/vault/config
##      - ./vault/policies:/vault/policies
#      - ./vault/data:/vault/data
#    ports:
#      - 8200:8200
#    environment:
#      - VAULT_DEV_ROOT_TOKEN_ID=myroot
#      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
#      - VAULT_ADDR=http://0.0.0.0:8200
#      - VAULT_API_ADDR=http://0.0.0.0:8200
#      - VAULT_ADDRESS=http://0.0.0.0:8200
#    cap_add:
#      - IPC_LOCK
#    command: vault server -config=/vault/config/vault.json

#  vault-server:
#    container_name: vault
#    build:
#      context: ./vault
#      dockerfile: Dockerfile
#    image: parcel-delivery/vault
#    ports:
#      - "8200:8200"
#    environment:
#      VAULT_ADDR: "http://0.0.0.0:8200"
#      VAULT_DEV_ROOT_TOKEN_ID: "vault-plaintext-root-token"
#    cap_add:
#      - IPC_LOCK
#    networks:
#      vault-network:
#        ipv4_address: 172.21.0.10
#        aliases:
#          - vault-server
networks:
  backend:
    driver: bridge