server:
  port: 8095
eureka:
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eureka-server:8070/eureka/
spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  jpa:
    database: POSTGRESQL
    show-sql : true
    properties:
      hibernate:dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
      hibernate.naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
  database:
    driverClassName: org.postgresql.Driver
  datasource:
    platform: postgres
    testWhileIdle: true
    validationQuery: SELECT 1
  kafka:
    consumer:
      group-id: delivery-group-id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties.spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  liquibase:
    change-log: classpath:db/changelog-master.yml
  security:
    jwt:
      secretKey: JfgsqVS0pV2Gn6jEMWG5UYMygDLptvmOSYaWobf1sLwnk0X8TXjvBTaVhCaBOZr
      expirationMs: 3600000
      refreshExpirationMs: 86400000
  mvc:
    cors:
      mapping: "/**"
      allowed-origins: "*"
      allowed-methods: "GET, PUT, POST, PATCH, DELETE"
management:
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
kafka:
  topic:
    put-delivery: private.parcel.order.update.ordermessage
    edit-status-delivery: private.parcel.order.update.status
    cancel-delivery: private.parcel.order.cancel.orderid
    assign-courier: private.parcel.order.assign.courier
    notification-message: private.parcel.order.notification
resilience4j.circuitbreaker:
  instances:
    licenseService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      ringBufferSizeInHalfOpenState: 1
      waitDurationInOpenState: 3s
      failureRateThreshold: 50
      recordExceptions:
        - feign.FeignException
        - java.lang.InterruptedException
resilience4j.retry:
  instances:
    myRetry:
      maxRetryAttempts: 3
      waitDuration: 1s
      retryExceptions:
        - feign.FeignException
resilience4j.timelimiter:
  instances:
    myTimeLimiter:
      timeoutDuration: 5s